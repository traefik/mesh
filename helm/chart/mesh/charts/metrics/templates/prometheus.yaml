---
apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: prometheus-rules
  namespace: {{ .Release.Namespace }}
  labels:
    app: maesh
    component: prometheus
    chart: {{ include "traefikMesh.chartLabel" . | quote }}
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
data:
  general.yaml: |
    groups:
      - name: general
        rules:
          - record: job:http_duration_seconds:p99:5m
            expr: histogram_quantile(0.99, sum(rate(http_duration_seconds_bucket[5m])) by (job, le))
          - record: job:http_duration_seconds:p90:5m
            expr: histogram_quantile(0.90, sum(rate(http_duration_seconds_bucket[5m])) by (job, le))
          - record: job:http_duration_seconds:p50:5m
            expr: histogram_quantile(0.50, sum(rate(http_duration_seconds_bucket[5m])) by (job, le))
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-core
  namespace: {{ .Release.Namespace }}
  labels:
    app: maesh
    component: prometheus
    chart: {{ include "traefikMesh.chartLabel" . | quote }}
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
data:
  prometheus.yaml: |
    global:
      scrape_interval: 10s
      scrape_timeout: 10s
      evaluation_interval: 10s
    rule_files:
      - "/prometheus/rules/*.yaml"

    scrape_configs:
      - job_name: 'traefik-mesh'
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
            # Add the version label extracted from the pod label version.
          - source_labels: [__meta_kubernetes_pod_label_version]
            action: replace
            replacement: $1
            target_label: version
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - {{ .Release.Namespace }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-core
  namespace: {{ .Release.Namespace }}
  labels:
    app: maesh
    component: prometheus
    chart: {{ include "traefikMesh.chartLabel" . | quote }}
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: maesh
      component: prometheus
  template:
    metadata:
      name: prometheus-main
      labels:
        app: maesh
        component: prometheus
    spec:
      serviceAccountName: prometheus-k8s
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 2000
        runAsUser: 1000
        runAsNonRoot: true
      containers:
      - name: prometheus
        image: {{ .Values.image.prometheus | quote }}
        args:
          - '--storage.tsdb.retention=60d'
          - '--storage.tsdb.path="/prometheus/data/"'
          - '--web.enable-lifecycle'
          - '--config.file=/prometheus/config/prometheus.yaml'
        ports:
        - name: webui
          containerPort: 9090
        readinessProbe:
          httpGet:
            path: "/-/ready"
            port: webui
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            path: "/-/healthy"
            port: webui
          initialDelaySeconds: 5
        {{- if .Values.prometheus.resources }}
        {{- toYaml .Values.prometheus.resources | indent 8 }}
        {{- end }}
        volumeMounts:
        - name: config-volume
          mountPath: /prometheus/config
        - name: rules-volume
          mountPath: /prometheus/rules
        - name: prometheus-storage
          mountPath: /prometheus
      - name: configmap-reload
        image: {{ .Values.image.configmapReload | quote }}
        imagePullPolicy: IfNotPresent
        args:
          - --volume-dir=/etc/config
          - --volume-dir=/etc/rules
          - --webhook-url=http://localhost:9090/-/reload
        volumeMounts:
          - name: config-volume
            mountPath: /etc/config
            readOnly: true
          - name: rules-volume
            mountPath: /etc/rules
            readOnly: true
        resources:
          limits:
            cpu: 10m
            memory: 15Mi
          requests:
            cpu: 10m
            memory: 10Mi
      initContainers:
      - name: prometheus-storage-permission-fix
        image: busybox
        command: ["/bin/chown", "-R", "1000:2000", "/prometheus"]
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        volumeMounts:
        - name: prometheus-storage
          mountPath: /prometheus
      volumes:
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-storage
      - name: config-volume
        configMap:
          name: prometheus-core
      - name: rules-volume
        configMap:
          name: prometheus-rules

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: {{ .Release.Namespace }}
  labels:
    app: maesh
    component: prometheus
    chart: {{ include "traefikMesh.chartLabel" . | quote }}
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
  annotations:
    prometheus.io/scrape: 'true'
spec:
  type: {{ .Values.prometheus.service.type }}
  ports:
    - port: {{ .Values.prometheus.service.port }}
      targetPort: webui
      {{- if .Values.prometheus.service.nodePort }}
      nodePort: {{ .Values.prometheus.service.nodePort }}
      {{- end }}
      protocol: TCP
      name: webui
  selector:
    app: maesh
    component: prometheus
